class DateTime
	instance variables
			private year : nat;
			private month : nat;
			private day : nat;
			private hour : nat;
			private minutes : nat;
			
	operations		
			-- Creates a new Date object given its year, month and day --
			public DateTime: nat * nat * nat * nat * nat ==> DateTime
	    	DateTime(y, m, d, h, min) == (year := y; month := m; day := d; hour := h; minutes := min; return self)
	    	pre y > 0 and m > 0 and m <= 12 and d > 0 and d <= 31 and h < 24 and m < 60;
	    
			-- GETS --
		
			-- Returns the year of the Date object --
			pure public getYear : () ==> nat
				getYear() == (return year);	
			
			-- Returns the month of the Date object --
			pure public getMonth : () ==> nat
				getMonth() == (return month);	
			
			-- Returns the day of the Date object --
			pure public getDay : () ==> nat
				getDay() == (return day);

			-- Returns the hours of the Hour object --
			pure public getHour : () ==> nat
				getHour() == (return hour);
				
			-- Returns the minutes of the Hour object --
			pure public getMinutes : () ==> nat
				getMinutes() == (return minutes);
					

			-- AUXILIARY FUNCTIONS --
			
			-- If the date of Date object is later than the one of Date d object, returns true. Will return false otherwise -- 
			pure public laterDate : DateTime ==> bool
				laterDate(d) == (
					return (((year * 525948) + (month * 43829)  + (day * 1440)) > ((d.getYear() * 525948) + (d.getMonth() * 43829) + (d.getDay() * 1440)))
				);
				
			-- If the date of Date object is equal to the one of Date d object, return true. Will return false otherwise --
			pure public sameDate : DateTime ==> bool
				sameDate(d) == (
					return (((year * 525948) + (month * 43829)  + (day * 1440)) = ((d.getYear() * 525948) + (d.getMonth() * 43829) + (d.getDay() * 1440)))
				);
				
			-- If the hour of DateTime object is later than the hour of DateTime object dth, returns true. Will return false otherwise --
			pure public laterHour : DateTime ==> bool
				laterHour(dth) == (
					return ((hour * 60) + minutes) > ((dth.getHour() * 60) + dth.getMinutes())
				);
			
			-- If the hour of DateTime object is equal to the hour of DateTime object dth, returns true. Will return false otherwise --
			pure public sameHour : DateTime ==> bool
				sameHour(dth) == (
					return ((hour * 60) + minutes) = ((dth.getHour() * 60) + dth.getMinutes())
				);
				
			-- If the time of DateTime object is later than the time of DateTime object dt, returns true. Will return false otherwise --
			pure public laterTime : DateTime ==> bool
			laterTime(dt) == (
				return (((year * 525948) + (month * 43829)  + (day * 1440) + (hour * 60) + minutes) > ((dt.getYear() * 525948) + (dt.getMonth() * 43829) + (dt.getDay() * 1440) + (dt.getHour() * 60) + dt.getMinutes()))
				);

end DateTime

-- TEST CLASS FOR DATETIME CLASS --

class DateTimeTest is subclass of TestSuiteJyve
	instance variables
		d1 : DateTime := new DateTime(2017, 12, 30, 20, 30);
		d2 : DateTime := new DateTime(2017, 10, 30, 20, 30);
		d3 : DateTime := new DateTime(2017, 12, 30, 21, 30);

	operations
		private testlaterDate: () ==> ()
	    testlaterDate() ==
	    (
	      assertEqual(d1.laterDate(d2), true);
	      assertEqual(d2.laterDate(d1), false);
	    );
	    
	  private testsameDate: () ==> ()
	  	testsameDate() ==
	  	(
	  		assertEqual(d1.sameDate(d3), true);
	  		assertEqual(d1.sameDate(d2), false);
	  	);
	  	
	  private testlaterHour: () ==> ()
	  	testlaterHour() ==
	  	(
	  		assertEqual(d3.laterHour(d1), true);
	  		assertEqual(d1.laterHour(d3), false);
	  	);
	  	
	  private testsameHour: () ==> ()
	  	testsameHour() ==
	  	(
	  		assertEqual(d1.sameHour(d2), true);
	  		assertEqual(d2.sameHour(d3), false);
	  	);
	  	
	  private testlaterTime: () ==> ()
	  	testlaterTime() ==
	  	(
	  		assertEqual(d3.laterTime(d1), true);
	  		assertEqual(d1.laterTime(d3), false);
	  	);
	    
	  -- GETS --
	  private testgetYear: () ==> ()
	    testgetYear() ==
	    (
	      assertEqual(d1.getYear(), 2017);
	      assertEqual(d2.getYear(), 2017);
	    );
	  private testgetMonth: () ==> ()
	    testgetMonth() ==
	    (
	      assertEqual(d1.getMonth(), 12);
	      assertEqual(d2.getMonth(), 10);
	    );
	  private testgetDay: () ==> ()
	    testgetDay() ==
	    (
	      assertEqual(d1.getDay(), 30);
	      assertEqual(d2.getDay(), 30);
	    );
	  private testgetHour: () ==> ()
	    testgetHour() ==
	    (
	      assertEqual(d1.getHour(), 20);
	      assertEqual(d2.getHour(), 20);
	    );
	  private testgetMinutes: () ==> ()
	    testgetMinutes() ==
	    (
	      assertEqual(d1.getMinutes(), 30);
	      assertEqual(d2.getMinutes(), 30);
	    );
	       
    public static main: () ==> ()
	    main() ==
	    (
	    	dcl test : DateTimeTest := new DateTimeTest();
        test.testlaterDate();
        test.testsameDate();
        test.testlaterHour();
        test.testsameHour();
        test.testlaterTime();
	      test.testgetYear();
	      test.testgetMonth();
	      test.testgetDay();
	      test.testgetHour();
	      test.testgetMinutes();
	    );
		
end DateTimeTest