class Location
	types
			public String = seq of char;

	instance variables
			private city : String;
			private state : String;

	operations
			-- Create a new Location object with all necessary parameters --
			public Location: String * String ==> Location
				Location(c, s) == (city := c; state := s; return self)
			pre c <> [] and s <> [];	
		
			-- GETS --
		
			-- Returns the name of the city in the Location object --
			public getCity: () ==> String
				getCity() == (return city);
				
			-- Return the name of the state in the Location object --
			public getState: () ==> String
				getState() == (return state);

			-- SETS --
			
			-- Changes the name of the city in the Location object --
			public setCity: String ==> ()
				setCity(c) == (city := c; return);
			
			-- Changes the name of the state in the Location object --
			public setState: String ==> ()
				setState(s) == (state := s; return);
			
end Location

-- TEST CLASS FOR LOCATION CLASS --

class LocationTest is subclass of TestSuiteJyve
	instance variables
			l1 : Location := new Location("New Jersey", "New York");
			l2 : Location := new Location("Los Angeles", "California");
	
	operations
			-- GETS --
			private testgetCity: () ==> ()
				testgetCity() == (
					assertEqual(l1.getCity(), "New Jersey");
					assertEqual(l2.getCity(), "Los Angeles");
				);
			
			private testgetState: () ==> ()
				testgetState() == (
					assertEqual(l1.getState(), "New York");
					assertEqual(l2.getState(), "California");
				);
			
			-- SETS --
			private testsetCity: () ==> ()
				testsetCity() == (
					l1.setCity("Miami");
					l2.setCity("Oklahoma City");
				);
				
			private testsetState: () ==> ()
				testsetState() == (
					l1.setState("Florida");
					l2.setState("Oklahoma");
				);
	
			public static main: () ==> ()
	    	main() ==
	    	(
	    		dcl test : LocationTest := new LocationTest();
        	test.testgetCity();
        	test.testgetState();
        	test.testsetCity();
        	test.testsetState();
	    );

end LocationTest