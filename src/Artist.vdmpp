class Artist
types
			public String = seq of char;
instance variables
			private name : String;
			private location : Location;
			private description : String;
			private genres : set of Genre;
			private instruments : set of Instrument;
			private musics : set of Music := {};
			private shows : set of Show := {};
operations
			-- Create a new Artist with all given parameters
			public Artist: String * Location * String * set of Genre * set of Instrument ==> Artist
				Artist(n, l, d, setg, seti) == (name := n; location := l; description := d; genres := setg; instruments := seti)
				pre n <> [] and seti <> {};
				
				-- GETS --
				
				-- Returns the name of the Artist object --
				public getName : () ==> String
					getName() == (return name);
					
				-- Returns the location of the Artist object --
				public getLocation : () ==> Location
					getLocation() == (return location);
					
				-- Returns the description of the Artist object --
				public getDescription : () ==> String
					getDescription() == (return description);
					
				-- Returns the genres of the Artist object --
				public getGenres : () ==> set of Genre
					getGenres() == (return genres);
					
				-- Returns the members of the Artist object --
				public getInstruments : () ==> set of Instrument
					getInstruments() == (return instruments);
					
				-- Returns the musics of the Artist object --
				public getMusics : () ==> set of Music
					getMusics() == (return musics);
					
				-- Returns the shows of the Artist object --
				public getShows : () ==> set of Show
					getShows() == (return shows);
					
				-- SETS -- 
				
				-- Changes the name of the Artist object --
				public setName : String ==> ()
					setName(n) == (name := n; return);
				
				-- Changes the location of the Artist object --
				public setLocation : Location ==> ()
					setLocation(l) == (location := l; return);
				
				-- Changes the description of the Artist object --
				public setDescription : String ==> ()
					setDescription(d) == (description := d; return);
				
			-- AUXILIARY FUNCTIONS --	
			
			-- ADDS --
			
			-- Add a music to Musics in an Artist object --
			public addMusic : Music ==> ()
				addMusic(m) == musics := {m} union musics
				pre m not in set musics
				post musics = {m} union musics~;
			
			-- Add an instrument to Instruments in an Artist object --
			public addInstrument : Instrument ==> ()
				addInstrument(i) == instruments := {i} union instruments
				pre (i not in set instruments) and (card instruments < 5)
				post instruments = {i} union instruments~;
				
			-- Add a genre to Genres in an Artist object --
			public addGenre : Genre ==> ()
				addGenre(g) == genres := {g} union genres
				pre (g not in set genres) and (card genres < 5)
				post genres = {g} union genres~;
				
			-- Add a show to Shows in an Artist object --
			public addShow : DateTime * DateTime * Venue * String ==> bool
				addShow(dts, dte, v, des) == (
					dcl nshow : Show := new Show(dts, dte, v, self, des);
					for all s in set shows do
					(
						if((dts.sameHour(s.getStartDate()) = true) and (dts.sameDate(s.getStartDate()) = true))
							then return false;
					);
					shows := {nshow} union shows;
					v.addShow(nshow);
					return true
				);

			-- REMOVES --
			
			-- Removes a music from Musics in an Artist object --
			public removeMusic : Music ==> ()
				removeMusic(m) == (musics := musics \ {m}; return)
				pre m in set musics
				post {} = {m} inter musics;
				
			-- Removes an instrument from Instruments in an Artist object --
			public removeInstrument : Instrument ==> ()
				removeInstrument(i) == (instruments := instruments \ {i}; return)
				pre i in set instruments
				post {} = {i} inter instruments;
				
			-- Removes a genre from Genres in an Artist object --
			public removeGenre : Genre ==> ()
				removeGenre(g) == (genres := genres \ {g}; return)
				pre g in set genres
				post {} = {g} inter genres;
				
			-- Removes a show from Shows in an Artist object --
			public removeShow : Show * Venue ==> ()
				removeShow(s, v) == (
					shows := shows \ {s};
					v.removeShow(s);
					return
				)
				pre s in set shows
				post {} = {s} inter shows;
					
			-- TODO Test
			
end Artist