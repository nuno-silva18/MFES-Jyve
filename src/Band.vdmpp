class Band
types
			public String = seq of char;
instance variables
			private name : String;
			private location : Location;
			private description : String;
			private genres : set of Genre;
			private members : set of Artist;
			private musics : set of Music := {};
			private shows : set of Show := {};
operations
			-- Create a new Band with all given parameters
			public Band: String * Location * String * set of Genre * set of Artist ==> Band
				Band(n, l, d, setg, seta) == (name := n; location := l; description := d; genres := setg; members := seta)
				pre n <> [] and seta <> {};
				
				-- GETS --
				
				-- Returns the name of the Band object --
				public getName : () ==> String
					getName() == (return name);
					
				-- Returns the location of the Band object --
				public getLocation : () ==> Location
					getLocation() == (return location);
					
				-- Returns the description of the Band object --
				public getDescription : () ==> String
					getDescription() == (return description);
					
				-- Returns the genres of the Band object --
				public getGenres : () ==> set of Genre
					getGenres() == (return genres);
					
				-- Returns the members of the Band object --
				public getMembers : () ==> set of Artist
					getMembers() == (return members);
					
				-- Returns the musics of the Band object --
				public getMusics : () ==> set of Music
					getMusics() == (return musics);
					
				-- Returns the shows of the Band object --
				public getShows : () ==> set of Show
					getShows() == (return shows);
					
				-- SETS -- 
				
				-- Changes the name of the Band object --
				public setName : String ==> ()
					setName(n) == (name := n; return);
				
				-- Changes the location of the Band object --
				public setLocation : Location ==> ()
					setLocation(l) == (location := l; return);
				
				-- Changes the description of the Band object --
				public setDescription : String ==> ()
					setDescription(d) == (description := d; return);
				
			-- AUXILIARY FUNCTIONS --
			
			-- Add a music to Musics in an Band object --
			public addMusic : Music ==> ()
				addMusic(m) == musics := {m} union musics
				pre m not in set musics
				post musics = {m} union musics~;
			
			-- Add an Artist to members in a Band object --
			public addMember : Artist ==> ()
				addMember(a) == members := {a} union members
				pre a not in set members
				post members = {a} union members~;
				
			-- Add a genre to Genres in a Band object --
			public addGenre : Genre ==> ()
				addGenre(g) == genres := {g} union genres
				pre (g not in set genres) and (card genres < 5)
				post genres = {g} union genres~;
				
			-- Add a show to Shows in a Band object --
			public addShow : DateTime * DateTime * Venue * String ==> bool
				addShow(dts, dte, v, des) == (
					dcl nshow : Show := new Show(dts, dte, v, self, des);
					for all s in set shows do
					(
						if((dts.sameHour(s.getStartDate()) = true) and (dts.sameDate(s.getStartDate()) = true))
							then return false;
					);
					shows := {nshow} union shows;
					v.addShow(nshow);
					return true
				);

			-- REMOVES --
			
			-- Removes a music from Musics in an Band object --
			public removeMusic : Music ==> ()
				removeMusic(m) == (musics := musics \ {m}; return)
				pre m in set musics
				post {} = {m} inter musics;
				
			-- Removes an Artist from Members in a Band object --
			public removeMembers : Artist ==> ()
				removeMembers(a) == (members := members \ {a}; return)
				pre a in set members
				post {} = {a} inter members;
				
			-- Removes a genre from Genres in a Band object --
			public removeGenre : Genre ==> ()
				removeGenre(g) == (genres := genres \ {g}; return)
				pre g in set genres
				post {} = {g} inter genres;
				
			-- Removes a show from Shows in a Band object --
			public removeShow : Show * Venue ==> ()
				removeShow(s, v) == (
					shows := shows \ {s};
					v.removeShow(s);
					return
				)
				pre s in set shows
				post {} = {s} inter shows;
				
				-- TODO Add tests
			
end Band